buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'    //for plugin-publish-plugin
        }
    }
    dependencies {
        classpath 'info.solidsoft.gradle:cdeliveryboy:0.6.0'
        classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.3.0'
        classpath 'com.gradle.publish:plugin-publish-plugin:0.9.7'
        classpath 'com.toomuchcoding:uptodate-gradle-plugin:1.0.1'
    }
}

apply plugin: 'groovy'
apply plugin: 'info.solidsoft.cdeliveryboy'
apply plugin: 'ru.vyarus.animalsniffer'
apply plugin: 'com.toomuchcoding.uptodate'

cDeliveryBoy {
    tasks {
        promoteRepositoryTask = "releaseRepository"
    }
    nexus {
        autoPromote = true
    }
}

scmVersion {
    hooks {
        pre 'fileUpdate', [file       : 'README.md', pattern: { previousVersion, context -> /"io\.codearte\.gradle\.nexus:gradle-nexus-staging-plugin:$previousVersion"/ },
                           replacement: { currentVersion, context -> "\"io.codearte.gradle.nexus:gradle-nexus-staging-plugin:$currentVersion\"" }]
        pre 'fileUpdate', [file       : 'README.md', pattern: { previousVersion, context -> /id\ 'io\.codearte\.nexus-staging'\ version\ '$previousVersion'/ },
                           replacement: { currentVersion, context -> "id 'io.codearte.nexus-staging' version '$currentVersion'" }]
        pre 'fileUpdate', [file       : 'CHANGELOG.md', pattern: { previousVersion, context -> /^##\ ${context.currentVersion}\ -\ Unreleased$/ },
                           replacement: { currentVersion, context -> "## $currentVersion - ${new Date().format( 'yyyy-MM-dd' )}" }]
    }
}

project.version = scmVersion.version

sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

sourceSets {
    funcTest {
        java.srcDir file('src/funcTest/java')
        groovy.srcDir file('src/funcTest/groovy')
        resources.srcDir file('src/funcTest/resources')
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

    testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        //groovy 2.3.x or 2.4.x is already provided by Gradle itself
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testCompile 'info.solidsoft.spock:spock-global-unroll:0.5.1'
    testCompile 'org.objenesis:objenesis:2.6' //for mocking classes with Spock
    testCompile 'net.bytebuddy:byte-buddy:1.7.3'   //for Spying with Spock

    testCompile 'junit:junit:4.12'

    funcTestCompile sourceSets.main.output  //to make production plugin classes visible in functional tests (it's not in testCompile configuration)
    funcTestCompile sourceSets.test.output  //to depends on common unit and integration helper classes
    funcTestCompile configurations.testCompile
    funcTestRuntime configurations.testRuntime
    funcTestCompile('com.netflix.nebula:nebula-test:6.1.2') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    funcTestCompile 'com.github.tomakehurst:wiremock:1.50' //1.54+ makes GroovyBuilder to fail with parsing empty response on POST

    signature 'org.codehaus.mojo.signature:java17:1.0@signature'
}

//noinspection GroovyAssignabilityCheck
task funcTest(type: Test) {
    description = 'Run the functional tests.'
    group = 'Verification'

    testClassesDirs = sourceSets.funcTest.output.classesDirs
    classpath = sourceSets.funcTest.runtimeClasspath

    if (!project.hasProperty('enableE2ETests') && System.getenv().NEXUS_AT_ENABLE_E2E_TESTS == null) {
        logger.lifecycle("E2E tests execution is disabled.")
        exclude '**/*E2ESpec.*'
    }

    reports.html {
        destination = file("${reporting.baseDir}/funcTests")
    }
}

funcTest.shouldRunAfter test
check.shouldRunAfter funcTest
check.dependsOn funcTestClasses
uploadArchives.dependsOn funcTest, check

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn test, funcTest
}

tasks.withType(ru.vyarus.gradle.plugin.animalsniffer.AnimalSniffer) {
    onlyIf { project.hasProperty('compatibility') }
}

animalsniffer {
    sourceSets = [project.sourceSets.main]  //just for production classes - Animal Sniffer fails with: 'Undefined reference: void for Spock tests'
                                            //https://github.com/mojohaus/animal-sniffer/issues/27
}

nexusStaging {
    packageGroup = "io.codearte"
    stagingProfileId = "93c08fdebde1ff"
}

modifyPom {
    project {
        name 'Gradle Nexus staging plugin'
        description 'Gradle Nexus staging plugin'
        url 'https://github.com/Codearte/gradle-nexus-staging-plugin'
        inceptionYear '2015'

        scm {
            url 'https://github.com/Codearte/gradle-nexus-staging-plugin'
            connection 'scm:https://github.com/Codearte/gradle-nexus-staging-plugin.git'
            developerConnection 'scm:git://github.com/Codearte/gradle-nexus-staging-plugin.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'szpak'
                name 'Marcin ZajÄ…czkowski'
                email 'mszpak ATT wp DOTT pl'
                roles {
                    role 'developer'
                    role 'despot'
                }
            }
        }
    }
}

if (hasProperty('pluginPortal')) {

    apply plugin: 'com.gradle.plugin-publish'

    pluginBundle {
        website = 'https://github.com/Codearte/gradle-nexus-staging-plugin/'
        vcsUrl = 'https://github.com/Codearte/gradle-nexus-staging-plugin/'

        plugins {
            plugin {
                id = 'io.codearte.nexus-staging'
                displayName = 'gradle-nexus-staging-plugin'
                description = 'Releasing to Maven Central from Gradle without dealing with Nexus UI'
                tags = ['maven-central', 'nexus', 'release', 'binary', 'repository', 'staging', 'codearte']
            }
        }

        mavenCoordinates {
            groupId = project.group
            artifactId = project.name
        }
    }

    publishPlugins {
        onlyIf { ciBuild.isInReleaseMode }
        mustRunAfter releaseRepository
    }
    ciBuild.dependsOn publishPlugins
}

if (hasProperty('changelogSync')) {

    task syncChangelog(type: Exec) {
        doFirst { logger.info("Synchronizing changelog with GitHub for version ${project.version}") }
        commandLine 'chandler', 'push', "release/${project.version}", '--tag-prefix=release/'
    }

    syncChangelog {
        onlyIf { ciBuild.isInReleaseMode }
        mustRunAfter releaseRepository
        if (project.tasks.findByName("publishPlugins")) {
            mustRunAfter publishPlugins
        }
    }
    ciBuild.dependsOn syncChangelog
}
